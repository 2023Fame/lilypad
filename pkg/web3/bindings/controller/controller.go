// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package controller

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// SharedStructsAgreement is an auto generated low-level Go binding around an user-defined struct.
type SharedStructsAgreement struct {
	State                    uint8
	Mediator                 common.Address
	ResourceProviderAgreedAt *big.Int
	JobCreatorAgreedAt       *big.Int
	DealAgreedAt             *big.Int
	ResultsSubmittedAt       *big.Int
	ResultsAcceptedAt        *big.Int
	ResultsCheckedAt         *big.Int
	MediationAcceptedAt      *big.Int
	MediationRejectedAt      *big.Int
	TimeoutSubmitResultsAt   *big.Int
	TimeoutJudgeResultsAt    *big.Int
	TimeoutMediateResultsAt  *big.Int
}

// ControllerMetaData contains all meta data concerning the Controller contract.
var ControllerMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"DealAgreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"JobCreatorAgreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"MediationAcceptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"MediationRejectResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"ResourceProviderAgreed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"ResultAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"ResultAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"ResultChecked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"TimeoutJudgeResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"TimeoutMediateResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"TimeoutSubmitResult\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"acceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"instructionCount\",\"type\":\"uint256\"}],\"name\":\"addResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resourceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"jobCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instructionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCollateralMultiple\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationFee\",\"type\":\"uint256\"}],\"name\":\"agree\",\"outputs\":[{\"components\":[{\"internalType\":\"enumSharedStructs.AgreementState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resourceProviderAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"jobCreatorAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAgreedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsSubmittedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resultsCheckedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationAcceptedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mediationRejectedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutSubmitResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutJudgeResultsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeoutMediateResultsAt\",\"type\":\"uint256\"}],\"internalType\":\"structSharedStructs.Agreement\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mediator\",\"type\":\"address\"}],\"name\":\"checkResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"mediationAcceptResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"mediationRejectResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentsAddress\",\"type\":\"address\"}],\"name\":\"setPaymentsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storageAddress\",\"type\":\"address\"}],\"name\":\"setStorageAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"timeoutJudgeResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"timeoutMediateResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"timeoutSubmitResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801562000010575f80fd5b5062000031620000256200003760201b60201c565b6200003e60201b60201c565b620000ff565b5f33905090565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b614c57806200010d5f395ff3fe608060405234801561000f575f80fd5b50600436106100f3575f3560e01c806359b910d6116100955780637fb9c45f116100645780637fb9c45f146102195780638da5cb5b14610235578063b3857a8814610253578063f2fde38b14610283576100f3565b806359b910d6146101bb5780635dd049fd146101d7578063640e570f146101f3578063715018a61461020f576100f3565b806335a7e268116100d157806335a7e2681461014b578063485cc955146101675780635427856714610183578063546cfd341461019f576100f3565b8063172257c7146100f757806323a9a8621461011357806332ebea041461012f575b5f80fd5b610111600480360381019061010c91906135c3565b61029f565b005b61012d600480360381019061012891906135c3565b61076b565b005b610149600480360381019061014491906135c3565b610b8e565b005b610165600480360381019061016091906135c3565b610f19565b005b610181600480360381019061017c9190613648565b61137f565b005b61019d600480360381019061019891906135c3565b6114c8565b005b6101b960048036038101906101b49190613686565b6118ed565b005b6101d560048036038101906101d091906136d6565b611d27565b005b6101f160048036038101906101ec91906135c3565b611e41565b005b61020d600480360381019061020891906136d6565b6121c4565b005b6102176122bd565b005b610233600480360381019061022e9190613701565b6122d0565b005b61023d612671565b60405161024a919061374e565b60405180910390f35b61026d60048036038101906102689190613767565b612698565b60405161027a91906139c5565b60405180910390f35b61029d600480360381019061029891906136d6565b612c50565b005b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98260026040518363ffffffff1660e01b81526004016102fc9291906139fd565b6020604051808303815f875af1158015610318573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061033c9190613a59565b61037b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037290613b04565b60405180910390fd5b61038481612cd2565b156103c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bb90613b6c565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac836040518263ffffffff1660e01b815260040161041f9190613b8a565b610120604051808303815f875af115801561043c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104609190613d34565b90503273ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16146104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb90613daa565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396e3c1846040518263ffffffff1660e01b815260040161052f9190613b8a565b6020604051808303815f875af115801561054b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061056f9190613dc8565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7455301856040518263ffffffff1660e01b81526004016105cc9190613b8a565b6020604051808303815f875af11580156105e8573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060c9190613dc8565b905060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663172257c7856040518263ffffffff1660e01b81526004016106689190613b8a565b5f604051808303815f87803b15801561067f575f80fd5b505af1158015610691573d5f803e3d5ffd5b5050505060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ec349598585602001518660400151868860c00151878a60a001516040518863ffffffff1660e01b815260040161070b9796959493929190613df3565b5f604051808303815f87803b158015610722575f80fd5b505af1158015610734573d5f803e3d5ffd5b50505050837f5bdb4aa0a0647d4311e04dd653def3a11ed762cab8cd7eb1465046687b0018a360405160405180910390a250505050565b61077481612e2e565b6107b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107aa90613eaa565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac836040518263ffffffff1660e01b815260040161080e9190613b8a565b610120604051808303815f875af115801561082b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084f9190613d34565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f9f6fe6846040518263ffffffff1660e01b81526004016108ac9190613b8a565b6101a0604051808303815f875af11580156108c9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108ed9190614020565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396e3c1856040518263ffffffff1660e01b815260040161094a9190613b8a565b6020604051808303815f875af1158015610966573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061098a9190613dc8565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7455301866040518263ffffffff1660e01b81526004016109e79190613b8a565b6020604051808303815f875af1158015610a03573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a279190613dc8565b905060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323a9a862866040518263ffffffff1660e01b8152600401610a839190613b8a565b5f604051808303815f87803b158015610a9a575f80fd5b505af1158015610aac573d5f803e3d5ffd5b5050505060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e75b2d5e86866020015187604001518760200151878a60c00151888c61010001516040518963ffffffff1660e01b8152600401610b2d98979695949392919061404c565b5f604051808303815f87803b158015610b44575f80fd5b505af1158015610b56573d5f803e3d5ffd5b50505050847f6869c4fbe3662f8188805783ad034002c0317a267b33e571b21803e0a82c222b60405160405180910390a25050505050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98260016040518363ffffffff1660e01b8152600401610beb9291906139fd565b6020604051808303815f875af1158015610c07573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c2b9190613a59565b610c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6190614112565b60405180910390fd5b610c73816130e0565b610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca99061417a565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac836040518263ffffffff1660e01b8152600401610d0d9190613b8a565b610120604051808303815f875af1158015610d2a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d4e9190613d34565b90503273ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614610dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db990614208565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166332ebea04836040518263ffffffff1660e01b8152600401610e1c9190613b8a565b5f604051808303815f87803b158015610e33575f80fd5b505af1158015610e45573d5f803e3d5ffd5b5050505060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eb7e939483836020015184604001518560c001518660a001516040518663ffffffff1660e01b8152600401610ebb959493929190614226565b5f604051808303815f87803b158015610ed2575f80fd5b505af1158015610ee4573d5f803e3d5ffd5b50505050817fbc228c937af4086388ee0005a68438286f19bbaa17d16ca9fa1b4361a918ee4260405160405180910390a25050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98260046040518363ffffffff1660e01b8152600401610f769291906139fd565b6020604051808303815f875af1158015610f92573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fb69190613a59565b610ff5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fec906142e7565b60405180910390fd5b610ffe8161323c565b61103d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110349061417a565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac836040518263ffffffff1660e01b81526004016110989190613b8a565b610120604051808303815f875af11580156110b5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110d99190613d34565b90503273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16148061114857503273ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff16145b611187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117e90614375565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7455301846040518263ffffffff1660e01b81526004016111e29190613b8a565b6020604051808303815f875af11580156111fe573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112229190613dc8565b905060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166335a7e268846040518263ffffffff1660e01b815260040161127e9190613b8a565b5f604051808303815f87803b158015611295575f80fd5b505af11580156112a7573d5f803e3d5ffd5b5050505060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd1e620184846020015185604001518660c00151868861010001516040518763ffffffff1660e01b815260040161132096959493929190614393565b5f604051808303815f87803b158015611337575f80fd5b505af1158015611349573d5f803e3d5ffd5b50505050827f89e0dd5728e1ea979c4292369726e7d04659e09cc314290d30caa1674be96f5660405160405180910390a2505050565b5f8060159054906101000a900460ff161590508080156113b0575060015f60149054906101000a900460ff1660ff16105b806113de57506113bf30613398565b1580156113dd575060015f60149054906101000a900460ff1660ff16145b5b61141d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141490614462565b60405180910390fd5b60015f60146101000a81548160ff021916908360ff16021790555080156114595760015f60156101000a81548160ff0219169083151502179055505b61146283611d27565b61146b826121c4565b80156114c3575f8060156101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516114ba91906144ce565b60405180910390a15b505050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98260026040518363ffffffff1660e01b81526004016115259291906139fd565b6020604051808303815f875af1158015611541573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115659190613a59565b6115a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159b90613b04565b60405180910390fd5b6115ad81612cd2565b6115ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e39061417a565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac836040518263ffffffff1660e01b81526004016116479190613b8a565b610120604051808303815f875af1158015611664573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116889190613d34565b90503273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146116fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f390614557565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7455301846040518263ffffffff1660e01b81526004016117579190613b8a565b6020604051808303815f875af1158015611773573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117979190613dc8565b905060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354278567846040518263ffffffff1660e01b81526004016117f39190613b8a565b5f604051808303815f87803b15801561180a575f80fd5b505af115801561181c573d5f803e3d5ffd5b5050505060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634e511a478484602001518560400151858760a001516040518663ffffffff1660e01b815260040161188e959493929190614226565b5f604051808303815f87803b1580156118a5575f80fd5b505af11580156118b7573d5f803e3d5ffd5b50505050827f6d119d722b70ecb67111e4b5501842b0d67693c9f093672d604d39e3ae95550460405160405180910390a2505050565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98460016040518363ffffffff1660e01b815260040161194a9291906139fd565b6020604051808303815f875af1158015611966573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061198a9190613a59565b6119c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c090614112565b60405180910390fd5b6119d2836130e0565b15611a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0990613b6c565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac856040518263ffffffff1660e01b8152600401611a6d9190613b8a565b610120604051808303815f875af1158015611a8a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611aae9190613d34565b90503273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b19906145bf565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663546cfd348585856040518463ffffffff1660e01b8152600401611b80939291906145dd565b6060604051808303815f875af1158015611b9c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bc09190614673565b505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7455301866040518263ffffffff1660e01b8152600401611c1c9190613b8a565b6020604051808303815f875af1158015611c38573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c5c9190613dc8565b905060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d934b442868460200151848660a001516040518563ffffffff1660e01b8152600401611cc6949392919061469e565b5f604051808303815f87803b158015611cdd575f80fd5b505af1158015611cef573d5f803e3d5ffd5b50505050847f92304b2ca1800e2e7b33e9d20a5da5822623e9a982f53a496597185a1abaaf3560405160405180910390a25050505050565b611d2f6133ba565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d949061472b565b60405180910390fd5b8060015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660035f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611e4a81612e2e565b611e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8090613eaa565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac836040518263ffffffff1660e01b8152600401611ee49190613b8a565b610120604051808303815f875af1158015611f01573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f259190613d34565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f9f6fe6846040518263ffffffff1660e01b8152600401611f829190613b8a565b6101a0604051808303815f875af1158015611f9f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fc39190614020565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d7455301856040518263ffffffff1660e01b81526004016120209190613b8a565b6020604051808303815f875af115801561203c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120609190613dc8565b905060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635dd049fd856040518263ffffffff1660e01b81526004016120bc9190613b8a565b5f604051808303815f87803b1580156120d3575f80fd5b505af11580156120e5573d5f803e3d5ffd5b5050505060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630b01498d858560200151866040015186602001518860c00151878a61010001516040518863ffffffff1660e01b81526004016121649796959493929190614749565b5f604051808303815f87803b15801561217b575f80fd5b505af115801561218d573d5f803e3d5ffd5b50505050837f2be5a64d41d363eaaa7b5195947407dde33371bff56ead257396804137b11d3560405160405180910390a250505050565b6121cc6133ba565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361223a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223190614800565b60405180910390fd5b8060025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060045f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6122c56133ba565b6122ce5f613438565b565b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98360026040518363ffffffff1660e01b815260040161232d9291906139fd565b6020604051808303815f875af1158015612349573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061236d9190613a59565b6123ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a390613b04565b60405180910390fd5b6123b582612cd2565b156123f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ec90613b6c565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac846040518263ffffffff1660e01b81526004016124509190613b8a565b610120604051808303815f875af115801561246d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124919190613d34565b90503273ffffffffffffffffffffffffffffffffffffffff16816040015173ffffffffffffffffffffffffffffffffffffffff1614612505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fc90614868565b60405180910390fd5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637fb9c45f84846040518363ffffffff1660e01b8152600401612561929190614886565b5f604051808303815f87803b158015612578575f80fd5b505af115801561258a573d5f803e3d5ffd5b5050505060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d92aa598483604001518460a001518561010001516040518563ffffffff1660e01b81526004016125fb949392919061469e565b5f604051808303815f87803b158015612612575f80fd5b505af1158015612624573d5f803e3d5ffd5b505050508173ffffffffffffffffffffffffffffffffffffffff16837f074f78619102b3535ae08a4db24ea45c911a67d55d987fea03a839676c7b57e860405160405180910390a3505050565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6126a0613500565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663372725fa8c8c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b815260040161270b999897969594939291906148ad565b610120604051808303815f875af1158015612728573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061274c9190613d34565b90505f816020015173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161490505f826040015173ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614905081806127c35750805b612802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f990614982565b60405180910390fd5b81156129695760035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342e4074e8e6040518263ffffffff1660e01b81526004016128629190613b8a565b6101a0604051808303815f875af115801561287f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128a39190614020565b5060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635559adf28e85602001518660a001516040518463ffffffff1660e01b815260040161290a939291906149a0565b5f604051808303815f87803b158015612921575f80fd5b505af1158015612933573d5f803e3d5ffd5b505050508c7f26a8f34da4d873e21cd45615776e6b843f82381ff094e72c5145f7a39466158f60405160405180910390a2612ad3565b8015612ad25760035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638462d54e8e6040518263ffffffff1660e01b81526004016129c99190613b8a565b6101a0604051808303815f875af11580156129e6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a0a9190614020565b5060045f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663245469fc8e85604001518660c001518760a001516040518563ffffffff1660e01b8152600401612a77949392919061469e565b5f604051808303815f87803b158015612a8e575f80fd5b505af1158015612aa0573d5f803e3d5ffd5b505050508c7f8e431afeb922a853c88906102d5cdd0f5d38dac2bd14ae62e32a1f6592b69c1460405160405180910390a25b5b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98e60016040518363ffffffff1660e01b8152600401612b309291906139fd565b6020604051808303815f875af1158015612b4c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b709190613a59565b15612ba3578c7f5d44329b191ed1b94788d02cec3bed307a47286c27dfee6592827a8619d1129b60405160405180910390a25b60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f9f6fe68e6040518263ffffffff1660e01b8152600401612bfd9190613b8a565b6101a0604051808303815f875af1158015612c1a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c3e9190614020565b93505050509998505050505050505050565b612c586133ba565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612cc6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cbd90614a45565b60405180910390fd5b612ccf81613438565b50565b5f8060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac846040518263ffffffff1660e01b8152600401612d2e9190613b8a565b610120604051808303815f875af1158015612d4b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d6f9190613d34565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f9f6fe6856040518263ffffffff1660e01b8152600401612dcc9190613b8a565b6101a0604051808303815f875af1158015612de9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e0d9190614020565b905081608001518160a00151612e239190614a90565b421192505050919050565b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98360046040518363ffffffff1660e01b8152600401612e8c9291906139fd565b6020604051808303815f875af1158015612ea8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ecc9190613a59565b612f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f02906142e7565b60405180910390fd5b612f148261323c565b15612f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f4b90613b6c565b60405180910390fd5b5f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f9f6fe6846040518263ffffffff1660e01b8152600401612faf9190613b8a565b6101a0604051808303815f875af1158015612fcc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ff09190614020565b90505f73ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603613064576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161305b90614b0d565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146130d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130cd90614b9b565b60405180910390fd5b6001915050919050565b5f8060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac846040518263ffffffff1660e01b815260040161313c9190613b8a565b610120604051808303815f875af1158015613159573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061317d9190613d34565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f9f6fe6856040518263ffffffff1660e01b81526004016131da9190613b8a565b6101a0604051808303815f875af11580156131f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061321b9190614020565b9050816080015181608001516132319190614a90565b421192505050919050565b5f8060035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382fd5bac846040518263ffffffff1660e01b81526004016132989190613b8a565b610120604051808303815f875af11580156132b5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906132d99190613d34565b90505f60035f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f9f6fe6856040518263ffffffff1660e01b81526004016133369190613b8a565b6101a0604051808303815f875af1158015613353573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906133779190614020565b905081608001518160e0015161338d9190614a90565b421192505050919050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6133c26134f9565b73ffffffffffffffffffffffffffffffffffffffff166133e0612671565b73ffffffffffffffffffffffffffffffffffffffff1614613436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161342d90614c03565b60405180910390fd5b565b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f33905090565b604051806101a001604052805f600981111561351f5761351e61382b565b5b81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f604051905090565b5f80fd5b5f819050919050565b6135a281613590565b81146135ac575f80fd5b50565b5f813590506135bd81613599565b92915050565b5f602082840312156135d8576135d761358c565b5b5f6135e5848285016135af565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f613617826135ee565b9050919050565b6136278161360d565b8114613631575f80fd5b50565b5f813590506136428161361e565b92915050565b5f806040838503121561365e5761365d61358c565b5b5f61366b85828601613634565b925050602061367c85828601613634565b9150509250929050565b5f805f6060848603121561369d5761369c61358c565b5b5f6136aa868287016135af565b93505060206136bb868287016135af565b92505060406136cc868287016135af565b9150509250925092565b5f602082840312156136eb576136ea61358c565b5b5f6136f884828501613634565b91505092915050565b5f80604083850312156137175761371661358c565b5b5f613724858286016135af565b925050602061373585828601613634565b9150509250929050565b6137488161360d565b82525050565b5f6020820190506137615f83018461373f565b92915050565b5f805f805f805f805f6101208a8c0312156137855761378461358c565b5b5f6137928c828d016135af565b99505060206137a38c828d01613634565b98505060406137b48c828d01613634565b97505060606137c58c828d016135af565b96505060806137d68c828d016135af565b95505060a06137e78c828d016135af565b94505060c06137f88c828d016135af565b93505060e06138098c828d016135af565b92505061010061381b8c828d016135af565b9150509295985092959850929598565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600a81106138695761386861382b565b5b50565b5f81905061387982613858565b919050565b5f6138888261386c565b9050919050565b6138988161387e565b82525050565b6138a78161360d565b82525050565b6138b681613590565b82525050565b6101a082015f8201516138d15f85018261388f565b5060208201516138e4602085018261389e565b5060408201516138f760408501826138ad565b50606082015161390a60608501826138ad565b50608082015161391d60808501826138ad565b5060a082015161393060a08501826138ad565b5060c082015161394360c08501826138ad565b5060e082015161395660e08501826138ad565b5061010082015161396b6101008501826138ad565b506101208201516139806101208501826138ad565b506101408201516139956101408501826138ad565b506101608201516139aa6101608501826138ad565b506101808201516139bf6101808501826138ad565b50505050565b5f6101a0820190506139d95f8301846138bc565b92915050565b6139e881613590565b82525050565b6139f78161387e565b82525050565b5f604082019050613a105f8301856139df565b613a1d60208301846139ee565b9392505050565b5f8115159050919050565b613a3881613a24565b8114613a42575f80fd5b50565b5f81519050613a5381613a2f565b92915050565b5f60208284031215613a6e57613a6d61358c565b5b5f613a7b84828501613a45565b91505092915050565b5f82825260208201905092915050565b7f4465616c206973206e6f7420696e20526573756c74735375626d6974746564205f8201527f7374617465000000000000000000000000000000000000000000000000000000602082015250565b5f613aee602583613a84565b9150613af982613a94565b604082019050919050565b5f6020820190508181035f830152613b1b81613ae2565b9050919050565b7f4465616c206861732074696d6564206f757400000000000000000000000000005f82015250565b5f613b56601283613a84565b9150613b6182613b22565b602082019050919050565b5f6020820190508181035f830152613b8381613b4a565b9050919050565b5f602082019050613b9d5f8301846139df565b92915050565b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b613bed82613ba7565b810181811067ffffffffffffffff82111715613c0c57613c0b613bb7565b5b80604052505050565b5f613c1e613583565b9050613c2a8282613be4565b919050565b5f81519050613c3d81613599565b92915050565b5f81519050613c518161361e565b92915050565b5f6101208284031215613c6d57613c6c613ba3565b5b613c78610120613c15565b90505f613c8784828501613c2f565b5f830152506020613c9a84828501613c43565b6020830152506040613cae84828501613c43565b6040830152506060613cc284828501613c2f565b6060830152506080613cd684828501613c2f565b60808301525060a0613cea84828501613c2f565b60a08301525060c0613cfe84828501613c2f565b60c08301525060e0613d1284828501613c2f565b60e083015250610100613d2784828501613c2f565b6101008301525092915050565b5f6101208284031215613d4a57613d4961358c565b5b5f613d5784828501613c57565b91505092915050565b7f4f6e6c79204a432063616e2061636365707420726573756c74000000000000005f82015250565b5f613d94601983613a84565b9150613d9f82613d60565b602082019050919050565b5f6020820190508181035f830152613dc181613d88565b9050919050565b5f60208284031215613ddd57613ddc61358c565b5b5f613dea84828501613c2f565b91505092915050565b5f60e082019050613e065f83018a6139df565b613e13602083018961373f565b613e20604083018861373f565b613e2d60608301876139df565b613e3a60808301866139df565b613e4760a08301856139df565b613e5460c08301846139df565b98975050505050505050565b7f43616e6e6f74206d65646961746520726573756c7400000000000000000000005f82015250565b5f613e94601583613a84565b9150613e9f82613e60565b602082019050919050565b5f6020820190508181035f830152613ec181613e88565b9050919050565b600a8110613ed4575f80fd5b50565b5f81519050613ee581613ec8565b92915050565b5f6101a08284031215613f0157613f00613ba3565b5b613f0c6101a0613c15565b90505f613f1b84828501613ed7565b5f830152506020613f2e84828501613c43565b6020830152506040613f4284828501613c2f565b6040830152506060613f5684828501613c2f565b6060830152506080613f6a84828501613c2f565b60808301525060a0613f7e84828501613c2f565b60a08301525060c0613f9284828501613c2f565b60c08301525060e0613fa684828501613c2f565b60e083015250610100613fbb84828501613c2f565b61010083015250610120613fd184828501613c2f565b61012083015250610140613fe784828501613c2f565b61014083015250610160613ffd84828501613c2f565b6101608301525061018061401384828501613c2f565b6101808301525092915050565b5f6101a082840312156140365761403561358c565b5b5f61404384828501613eeb565b91505092915050565b5f610100820190506140605f83018b6139df565b61406d602083018a61373f565b61407a604083018961373f565b614087606083018861373f565b61409460808301876139df565b6140a160a08301866139df565b6140ae60c08301856139df565b6140bb60e08301846139df565b9998505050505050505050565b7f4465616c206973206e6f7420696e204465616c416772656564207374617465005f82015250565b5f6140fc601f83613a84565b9150614107826140c8565b602082019050919050565b5f6020820190508181035f830152614129816140f0565b9050919050565b7f4465616c20686173206e6f742074696d6564206f7574207965740000000000005f82015250565b5f614164601a83613a84565b915061416f82614130565b602082019050919050565b5f6020820190508181035f83015261419181614158565b9050919050565b7f4f6e6c79204a432063616e20726566756e64207375626d697420726573756c745f8201527f732074696d656f75740000000000000000000000000000000000000000000000602082015250565b5f6141f2602983613a84565b91506141fd82614198565b604082019050919050565b5f6020820190508181035f83015261421f816141e6565b9050919050565b5f60a0820190506142395f8301886139df565b614246602083018761373f565b614253604083018661373f565b61426060608301856139df565b61426d60808301846139df565b9695505050505050565b7f4465616c206973206e6f7420696e20526573756c7473436865636b65642073745f8201527f6174650000000000000000000000000000000000000000000000000000000000602082015250565b5f6142d1602383613a84565b91506142dc82614277565b604082019050919050565b5f6020820190508181035f8301526142fe816142c5565b9050919050565b7f4f6e6c79205250206f72204a432063616e20726566756e64206d6564696174655f8201527f20726573756c74732074696d656f757400000000000000000000000000000000602082015250565b5f61435f603083613a84565b915061436a82614305565b604082019050919050565b5f6020820190508181035f83015261438c81614353565b9050919050565b5f60c0820190506143a65f8301896139df565b6143b3602083018861373f565b6143c0604083018761373f565b6143cd60608301866139df565b6143da60808301856139df565b6143e760a08301846139df565b979650505050505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c7265615f8201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b5f61444c602e83613a84565b9150614457826143f2565b604082019050919050565b5f6020820190508181035f83015261447981614440565b9050919050565b5f819050919050565b5f60ff82169050919050565b5f819050919050565b5f6144b86144b36144ae84614480565b614495565b614489565b9050919050565b6144c88161449e565b82525050565b5f6020820190506144e15f8301846144bf565b92915050565b7f4f6e6c792052502063616e20726566756e64206a7564676520726573756c74735f8201527f2074696d656f7574000000000000000000000000000000000000000000000000602082015250565b5f614541602883613a84565b915061454c826144e7565b604082019050919050565b5f6020820190508181035f83015261456e81614535565b9050919050565b7f4f6e6c792052502063616e2061646420726573756c74730000000000000000005f82015250565b5f6145a9601783613a84565b91506145b482614575565b602082019050919050565b5f6020820190508181035f8301526145d68161459d565b9050919050565b5f6060820190506145f05f8301866139df565b6145fd60208301856139df565b61460a60408301846139df565b949350505050565b5f6060828403121561462757614626613ba3565b5b6146316060613c15565b90505f61464084828501613c2f565b5f83015250602061465384828501613c2f565b602083015250604061466784828501613c2f565b60408301525092915050565b5f606082840312156146885761468761358c565b5b5f61469584828501614612565b91505092915050565b5f6080820190506146b15f8301876139df565b6146be602083018661373f565b6146cb60408301856139df565b6146d860608301846139df565b95945050505050565b7f53746f726167652061646472657373206d75737420626520646566696e6564005f82015250565b5f614715601f83613a84565b9150614720826146e1565b602082019050919050565b5f6020820190508181035f83015261474281614709565b9050919050565b5f60e08201905061475c5f83018a6139df565b614769602083018961373f565b614776604083018861373f565b614783606083018761373f565b61479060808301866139df565b61479d60a08301856139df565b6147aa60c08301846139df565b98975050505050505050565b7f5061796d656e74732061646472657373206d75737420626520646566696e65645f82015250565b5f6147ea602083613a84565b91506147f5826147b6565b602082019050919050565b5f6020820190508181035f830152614817816147de565b9050919050565b7f4f6e6c79204a432063616e20636865636b20726573756c7400000000000000005f82015250565b5f614852601883613a84565b915061485d8261481e565b602082019050919050565b5f6020820190508181035f83015261487f81614846565b9050919050565b5f6040820190506148995f8301856139df565b6148a6602083018461373f565b9392505050565b5f610120820190506148c15f83018c6139df565b6148ce602083018b61373f565b6148db604083018a61373f565b6148e860608301896139df565b6148f560808301886139df565b61490260a08301876139df565b61490f60c08301866139df565b61491c60e08301856139df565b61492a6101008301846139df565b9a9950505050505050505050565b7f4f6e6c79205250206f72204a432063616e20616772656520746f206465616c005f82015250565b5f61496c601f83613a84565b915061497782614938565b602082019050919050565b5f6020820190508181035f83015261499981614960565b9050919050565b5f6060820190506149b35f8301866139df565b6149c0602083018561373f565b6149cd60408301846139df565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f20615f8201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b5f614a2f602683613a84565b9150614a3a826149d5565b604082019050919050565b5f6020820190508181035f830152614a5c81614a23565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f614a9a82613590565b9150614aa583613590565b9250828201905080821115614abd57614abc614a63565b5b92915050565b7f4e6f206d65646961746f7220686173206265656e2073656c65637465640000005f82015250565b5f614af7601d83613a84565b9150614b0282614ac3565b602082019050919050565b5f6020820190508181035f830152614b2481614aeb565b9050919050565b7f4f6e6c79206d65646961746f722063616e20616363657074206f722072656a655f8201527f637420726573756c740000000000000000000000000000000000000000000000602082015250565b5f614b85602983613a84565b9150614b9082614b2b565b604082019050919050565b5f6020820190508181035f830152614bb281614b79565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f82015250565b5f614bed602083613a84565b9150614bf882614bb9565b602082019050919050565b5f6020820190508181035f830152614c1a81614be1565b905091905056fea2646970667358221220d45df003107000ded9272c41bf6f8aa119d1d7e00cb7d954b287a8044fb3dfce64736f6c63430008150033",
}

// ControllerABI is the input ABI used to generate the binding from.
// Deprecated: Use ControllerMetaData.ABI instead.
var ControllerABI = ControllerMetaData.ABI

// ControllerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ControllerMetaData.Bin instead.
var ControllerBin = ControllerMetaData.Bin

// DeployController deploys a new Ethereum contract, binding an instance of Controller to it.
func DeployController(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Controller, error) {
	parsed, err := ControllerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ControllerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// Controller is an auto generated Go binding around an Ethereum contract.
type Controller struct {
	ControllerCaller     // Read-only binding to the contract
	ControllerTransactor // Write-only binding to the contract
	ControllerFilterer   // Log filterer for contract events
}

// ControllerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ControllerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ControllerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ControllerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ControllerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ControllerSession struct {
	Contract     *Controller       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ControllerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ControllerCallerSession struct {
	Contract *ControllerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// ControllerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ControllerTransactorSession struct {
	Contract     *ControllerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// ControllerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ControllerRaw struct {
	Contract *Controller // Generic contract binding to access the raw methods on
}

// ControllerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ControllerCallerRaw struct {
	Contract *ControllerCaller // Generic read-only contract binding to access the raw methods on
}

// ControllerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ControllerTransactorRaw struct {
	Contract *ControllerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewController creates a new instance of Controller, bound to a specific deployed contract.
func NewController(address common.Address, backend bind.ContractBackend) (*Controller, error) {
	contract, err := bindController(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Controller{ControllerCaller: ControllerCaller{contract: contract}, ControllerTransactor: ControllerTransactor{contract: contract}, ControllerFilterer: ControllerFilterer{contract: contract}}, nil
}

// NewControllerCaller creates a new read-only instance of Controller, bound to a specific deployed contract.
func NewControllerCaller(address common.Address, caller bind.ContractCaller) (*ControllerCaller, error) {
	contract, err := bindController(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerCaller{contract: contract}, nil
}

// NewControllerTransactor creates a new write-only instance of Controller, bound to a specific deployed contract.
func NewControllerTransactor(address common.Address, transactor bind.ContractTransactor) (*ControllerTransactor, error) {
	contract, err := bindController(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ControllerTransactor{contract: contract}, nil
}

// NewControllerFilterer creates a new log filterer instance of Controller, bound to a specific deployed contract.
func NewControllerFilterer(address common.Address, filterer bind.ContractFilterer) (*ControllerFilterer, error) {
	contract, err := bindController(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ControllerFilterer{contract: contract}, nil
}

// bindController binds a generic wrapper to an already deployed contract.
func bindController(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ControllerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.ControllerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.ControllerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Controller *ControllerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Controller.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Controller *ControllerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Controller *ControllerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Controller.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Controller *ControllerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Controller.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Controller *ControllerSession) Owner() (common.Address, error) {
	return _Controller.Contract.Owner(&_Controller.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Controller *ControllerCallerSession) Owner() (common.Address, error) {
	return _Controller.Contract.Owner(&_Controller.CallOpts)
}

// AcceptResult is a paid mutator transaction binding the contract method 0x172257c7.
//
// Solidity: function acceptResult(uint256 dealId) returns()
func (_Controller *ControllerTransactor) AcceptResult(opts *bind.TransactOpts, dealId *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "acceptResult", dealId)
}

// AcceptResult is a paid mutator transaction binding the contract method 0x172257c7.
//
// Solidity: function acceptResult(uint256 dealId) returns()
func (_Controller *ControllerSession) AcceptResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.AcceptResult(&_Controller.TransactOpts, dealId)
}

// AcceptResult is a paid mutator transaction binding the contract method 0x172257c7.
//
// Solidity: function acceptResult(uint256 dealId) returns()
func (_Controller *ControllerTransactorSession) AcceptResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.AcceptResult(&_Controller.TransactOpts, dealId)
}

// AddResult is a paid mutator transaction binding the contract method 0x546cfd34.
//
// Solidity: function addResult(uint256 dealId, uint256 resultsId, uint256 instructionCount) returns()
func (_Controller *ControllerTransactor) AddResult(opts *bind.TransactOpts, dealId *big.Int, resultsId *big.Int, instructionCount *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "addResult", dealId, resultsId, instructionCount)
}

// AddResult is a paid mutator transaction binding the contract method 0x546cfd34.
//
// Solidity: function addResult(uint256 dealId, uint256 resultsId, uint256 instructionCount) returns()
func (_Controller *ControllerSession) AddResult(dealId *big.Int, resultsId *big.Int, instructionCount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.AddResult(&_Controller.TransactOpts, dealId, resultsId, instructionCount)
}

// AddResult is a paid mutator transaction binding the contract method 0x546cfd34.
//
// Solidity: function addResult(uint256 dealId, uint256 resultsId, uint256 instructionCount) returns()
func (_Controller *ControllerTransactorSession) AddResult(dealId *big.Int, resultsId *big.Int, instructionCount *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.AddResult(&_Controller.TransactOpts, dealId, resultsId, instructionCount)
}

// Agree is a paid mutator transaction binding the contract method 0xb3857a88.
//
// Solidity: function agree(uint256 dealId, address resourceProvider, address jobCreator, uint256 instructionPrice, uint256 timeout, uint256 timeoutCollateral, uint256 paymentCollateral, uint256 resultsCollateralMultiple, uint256 mediationFee) returns((uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))
func (_Controller *ControllerTransactor) Agree(opts *bind.TransactOpts, dealId *big.Int, resourceProvider common.Address, jobCreator common.Address, instructionPrice *big.Int, timeout *big.Int, timeoutCollateral *big.Int, paymentCollateral *big.Int, resultsCollateralMultiple *big.Int, mediationFee *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "agree", dealId, resourceProvider, jobCreator, instructionPrice, timeout, timeoutCollateral, paymentCollateral, resultsCollateralMultiple, mediationFee)
}

// Agree is a paid mutator transaction binding the contract method 0xb3857a88.
//
// Solidity: function agree(uint256 dealId, address resourceProvider, address jobCreator, uint256 instructionPrice, uint256 timeout, uint256 timeoutCollateral, uint256 paymentCollateral, uint256 resultsCollateralMultiple, uint256 mediationFee) returns((uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))
func (_Controller *ControllerSession) Agree(dealId *big.Int, resourceProvider common.Address, jobCreator common.Address, instructionPrice *big.Int, timeout *big.Int, timeoutCollateral *big.Int, paymentCollateral *big.Int, resultsCollateralMultiple *big.Int, mediationFee *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Agree(&_Controller.TransactOpts, dealId, resourceProvider, jobCreator, instructionPrice, timeout, timeoutCollateral, paymentCollateral, resultsCollateralMultiple, mediationFee)
}

// Agree is a paid mutator transaction binding the contract method 0xb3857a88.
//
// Solidity: function agree(uint256 dealId, address resourceProvider, address jobCreator, uint256 instructionPrice, uint256 timeout, uint256 timeoutCollateral, uint256 paymentCollateral, uint256 resultsCollateralMultiple, uint256 mediationFee) returns((uint8,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))
func (_Controller *ControllerTransactorSession) Agree(dealId *big.Int, resourceProvider common.Address, jobCreator common.Address, instructionPrice *big.Int, timeout *big.Int, timeoutCollateral *big.Int, paymentCollateral *big.Int, resultsCollateralMultiple *big.Int, mediationFee *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.Agree(&_Controller.TransactOpts, dealId, resourceProvider, jobCreator, instructionPrice, timeout, timeoutCollateral, paymentCollateral, resultsCollateralMultiple, mediationFee)
}

// CheckResult is a paid mutator transaction binding the contract method 0x7fb9c45f.
//
// Solidity: function checkResult(uint256 dealId, address mediator) returns()
func (_Controller *ControllerTransactor) CheckResult(opts *bind.TransactOpts, dealId *big.Int, mediator common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "checkResult", dealId, mediator)
}

// CheckResult is a paid mutator transaction binding the contract method 0x7fb9c45f.
//
// Solidity: function checkResult(uint256 dealId, address mediator) returns()
func (_Controller *ControllerSession) CheckResult(dealId *big.Int, mediator common.Address) (*types.Transaction, error) {
	return _Controller.Contract.CheckResult(&_Controller.TransactOpts, dealId, mediator)
}

// CheckResult is a paid mutator transaction binding the contract method 0x7fb9c45f.
//
// Solidity: function checkResult(uint256 dealId, address mediator) returns()
func (_Controller *ControllerTransactorSession) CheckResult(dealId *big.Int, mediator common.Address) (*types.Transaction, error) {
	return _Controller.Contract.CheckResult(&_Controller.TransactOpts, dealId, mediator)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _storageAddress, address _paymentsAddress) returns()
func (_Controller *ControllerTransactor) Initialize(opts *bind.TransactOpts, _storageAddress common.Address, _paymentsAddress common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "initialize", _storageAddress, _paymentsAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _storageAddress, address _paymentsAddress) returns()
func (_Controller *ControllerSession) Initialize(_storageAddress common.Address, _paymentsAddress common.Address) (*types.Transaction, error) {
	return _Controller.Contract.Initialize(&_Controller.TransactOpts, _storageAddress, _paymentsAddress)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _storageAddress, address _paymentsAddress) returns()
func (_Controller *ControllerTransactorSession) Initialize(_storageAddress common.Address, _paymentsAddress common.Address) (*types.Transaction, error) {
	return _Controller.Contract.Initialize(&_Controller.TransactOpts, _storageAddress, _paymentsAddress)
}

// MediationAcceptResult is a paid mutator transaction binding the contract method 0x23a9a862.
//
// Solidity: function mediationAcceptResult(uint256 dealId) returns()
func (_Controller *ControllerTransactor) MediationAcceptResult(opts *bind.TransactOpts, dealId *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "mediationAcceptResult", dealId)
}

// MediationAcceptResult is a paid mutator transaction binding the contract method 0x23a9a862.
//
// Solidity: function mediationAcceptResult(uint256 dealId) returns()
func (_Controller *ControllerSession) MediationAcceptResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.MediationAcceptResult(&_Controller.TransactOpts, dealId)
}

// MediationAcceptResult is a paid mutator transaction binding the contract method 0x23a9a862.
//
// Solidity: function mediationAcceptResult(uint256 dealId) returns()
func (_Controller *ControllerTransactorSession) MediationAcceptResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.MediationAcceptResult(&_Controller.TransactOpts, dealId)
}

// MediationRejectResult is a paid mutator transaction binding the contract method 0x5dd049fd.
//
// Solidity: function mediationRejectResult(uint256 dealId) returns()
func (_Controller *ControllerTransactor) MediationRejectResult(opts *bind.TransactOpts, dealId *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "mediationRejectResult", dealId)
}

// MediationRejectResult is a paid mutator transaction binding the contract method 0x5dd049fd.
//
// Solidity: function mediationRejectResult(uint256 dealId) returns()
func (_Controller *ControllerSession) MediationRejectResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.MediationRejectResult(&_Controller.TransactOpts, dealId)
}

// MediationRejectResult is a paid mutator transaction binding the contract method 0x5dd049fd.
//
// Solidity: function mediationRejectResult(uint256 dealId) returns()
func (_Controller *ControllerTransactorSession) MediationRejectResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.MediationRejectResult(&_Controller.TransactOpts, dealId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Controller *ControllerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Controller *ControllerSession) RenounceOwnership() (*types.Transaction, error) {
	return _Controller.Contract.RenounceOwnership(&_Controller.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Controller *ControllerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Controller.Contract.RenounceOwnership(&_Controller.TransactOpts)
}

// SetPaymentsAddress is a paid mutator transaction binding the contract method 0x640e570f.
//
// Solidity: function setPaymentsAddress(address _paymentsAddress) returns()
func (_Controller *ControllerTransactor) SetPaymentsAddress(opts *bind.TransactOpts, _paymentsAddress common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "setPaymentsAddress", _paymentsAddress)
}

// SetPaymentsAddress is a paid mutator transaction binding the contract method 0x640e570f.
//
// Solidity: function setPaymentsAddress(address _paymentsAddress) returns()
func (_Controller *ControllerSession) SetPaymentsAddress(_paymentsAddress common.Address) (*types.Transaction, error) {
	return _Controller.Contract.SetPaymentsAddress(&_Controller.TransactOpts, _paymentsAddress)
}

// SetPaymentsAddress is a paid mutator transaction binding the contract method 0x640e570f.
//
// Solidity: function setPaymentsAddress(address _paymentsAddress) returns()
func (_Controller *ControllerTransactorSession) SetPaymentsAddress(_paymentsAddress common.Address) (*types.Transaction, error) {
	return _Controller.Contract.SetPaymentsAddress(&_Controller.TransactOpts, _paymentsAddress)
}

// SetStorageAddress is a paid mutator transaction binding the contract method 0x59b910d6.
//
// Solidity: function setStorageAddress(address _storageAddress) returns()
func (_Controller *ControllerTransactor) SetStorageAddress(opts *bind.TransactOpts, _storageAddress common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "setStorageAddress", _storageAddress)
}

// SetStorageAddress is a paid mutator transaction binding the contract method 0x59b910d6.
//
// Solidity: function setStorageAddress(address _storageAddress) returns()
func (_Controller *ControllerSession) SetStorageAddress(_storageAddress common.Address) (*types.Transaction, error) {
	return _Controller.Contract.SetStorageAddress(&_Controller.TransactOpts, _storageAddress)
}

// SetStorageAddress is a paid mutator transaction binding the contract method 0x59b910d6.
//
// Solidity: function setStorageAddress(address _storageAddress) returns()
func (_Controller *ControllerTransactorSession) SetStorageAddress(_storageAddress common.Address) (*types.Transaction, error) {
	return _Controller.Contract.SetStorageAddress(&_Controller.TransactOpts, _storageAddress)
}

// TimeoutJudgeResult is a paid mutator transaction binding the contract method 0x54278567.
//
// Solidity: function timeoutJudgeResult(uint256 dealId) returns()
func (_Controller *ControllerTransactor) TimeoutJudgeResult(opts *bind.TransactOpts, dealId *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "timeoutJudgeResult", dealId)
}

// TimeoutJudgeResult is a paid mutator transaction binding the contract method 0x54278567.
//
// Solidity: function timeoutJudgeResult(uint256 dealId) returns()
func (_Controller *ControllerSession) TimeoutJudgeResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TimeoutJudgeResult(&_Controller.TransactOpts, dealId)
}

// TimeoutJudgeResult is a paid mutator transaction binding the contract method 0x54278567.
//
// Solidity: function timeoutJudgeResult(uint256 dealId) returns()
func (_Controller *ControllerTransactorSession) TimeoutJudgeResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TimeoutJudgeResult(&_Controller.TransactOpts, dealId)
}

// TimeoutMediateResult is a paid mutator transaction binding the contract method 0x35a7e268.
//
// Solidity: function timeoutMediateResult(uint256 dealId) returns()
func (_Controller *ControllerTransactor) TimeoutMediateResult(opts *bind.TransactOpts, dealId *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "timeoutMediateResult", dealId)
}

// TimeoutMediateResult is a paid mutator transaction binding the contract method 0x35a7e268.
//
// Solidity: function timeoutMediateResult(uint256 dealId) returns()
func (_Controller *ControllerSession) TimeoutMediateResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TimeoutMediateResult(&_Controller.TransactOpts, dealId)
}

// TimeoutMediateResult is a paid mutator transaction binding the contract method 0x35a7e268.
//
// Solidity: function timeoutMediateResult(uint256 dealId) returns()
func (_Controller *ControllerTransactorSession) TimeoutMediateResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TimeoutMediateResult(&_Controller.TransactOpts, dealId)
}

// TimeoutSubmitResult is a paid mutator transaction binding the contract method 0x32ebea04.
//
// Solidity: function timeoutSubmitResult(uint256 dealId) returns()
func (_Controller *ControllerTransactor) TimeoutSubmitResult(opts *bind.TransactOpts, dealId *big.Int) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "timeoutSubmitResult", dealId)
}

// TimeoutSubmitResult is a paid mutator transaction binding the contract method 0x32ebea04.
//
// Solidity: function timeoutSubmitResult(uint256 dealId) returns()
func (_Controller *ControllerSession) TimeoutSubmitResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TimeoutSubmitResult(&_Controller.TransactOpts, dealId)
}

// TimeoutSubmitResult is a paid mutator transaction binding the contract method 0x32ebea04.
//
// Solidity: function timeoutSubmitResult(uint256 dealId) returns()
func (_Controller *ControllerTransactorSession) TimeoutSubmitResult(dealId *big.Int) (*types.Transaction, error) {
	return _Controller.Contract.TimeoutSubmitResult(&_Controller.TransactOpts, dealId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Controller *ControllerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Controller.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Controller *ControllerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Controller.Contract.TransferOwnership(&_Controller.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Controller *ControllerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Controller.Contract.TransferOwnership(&_Controller.TransactOpts, newOwner)
}

// ControllerDealAgreedIterator is returned from FilterDealAgreed and is used to iterate over the raw logs and unpacked data for DealAgreed events raised by the Controller contract.
type ControllerDealAgreedIterator struct {
	Event *ControllerDealAgreed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerDealAgreedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerDealAgreed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerDealAgreed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerDealAgreedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerDealAgreedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerDealAgreed represents a DealAgreed event raised by the Controller contract.
type ControllerDealAgreed struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDealAgreed is a free log retrieval operation binding the contract event 0x5d44329b191ed1b94788d02cec3bed307a47286c27dfee6592827a8619d1129b.
//
// Solidity: event DealAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterDealAgreed(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerDealAgreedIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "DealAgreed", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerDealAgreedIterator{contract: _Controller.contract, event: "DealAgreed", logs: logs, sub: sub}, nil
}

// WatchDealAgreed is a free log subscription operation binding the contract event 0x5d44329b191ed1b94788d02cec3bed307a47286c27dfee6592827a8619d1129b.
//
// Solidity: event DealAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchDealAgreed(opts *bind.WatchOpts, sink chan<- *ControllerDealAgreed, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "DealAgreed", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerDealAgreed)
				if err := _Controller.contract.UnpackLog(event, "DealAgreed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDealAgreed is a log parse operation binding the contract event 0x5d44329b191ed1b94788d02cec3bed307a47286c27dfee6592827a8619d1129b.
//
// Solidity: event DealAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseDealAgreed(log types.Log) (*ControllerDealAgreed, error) {
	event := new(ControllerDealAgreed)
	if err := _Controller.contract.UnpackLog(event, "DealAgreed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the Controller contract.
type ControllerInitializedIterator struct {
	Event *ControllerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerInitialized represents a Initialized event raised by the Controller contract.
type ControllerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Controller *ControllerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ControllerInitializedIterator, error) {

	logs, sub, err := _Controller.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ControllerInitializedIterator{contract: _Controller.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Controller *ControllerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ControllerInitialized) (event.Subscription, error) {

	logs, sub, err := _Controller.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerInitialized)
				if err := _Controller.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_Controller *ControllerFilterer) ParseInitialized(log types.Log) (*ControllerInitialized, error) {
	event := new(ControllerInitialized)
	if err := _Controller.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerJobCreatorAgreedIterator is returned from FilterJobCreatorAgreed and is used to iterate over the raw logs and unpacked data for JobCreatorAgreed events raised by the Controller contract.
type ControllerJobCreatorAgreedIterator struct {
	Event *ControllerJobCreatorAgreed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerJobCreatorAgreedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerJobCreatorAgreed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerJobCreatorAgreed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerJobCreatorAgreedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerJobCreatorAgreedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerJobCreatorAgreed represents a JobCreatorAgreed event raised by the Controller contract.
type ControllerJobCreatorAgreed struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterJobCreatorAgreed is a free log retrieval operation binding the contract event 0x8e431afeb922a853c88906102d5cdd0f5d38dac2bd14ae62e32a1f6592b69c14.
//
// Solidity: event JobCreatorAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterJobCreatorAgreed(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerJobCreatorAgreedIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "JobCreatorAgreed", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerJobCreatorAgreedIterator{contract: _Controller.contract, event: "JobCreatorAgreed", logs: logs, sub: sub}, nil
}

// WatchJobCreatorAgreed is a free log subscription operation binding the contract event 0x8e431afeb922a853c88906102d5cdd0f5d38dac2bd14ae62e32a1f6592b69c14.
//
// Solidity: event JobCreatorAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchJobCreatorAgreed(opts *bind.WatchOpts, sink chan<- *ControllerJobCreatorAgreed, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "JobCreatorAgreed", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerJobCreatorAgreed)
				if err := _Controller.contract.UnpackLog(event, "JobCreatorAgreed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseJobCreatorAgreed is a log parse operation binding the contract event 0x8e431afeb922a853c88906102d5cdd0f5d38dac2bd14ae62e32a1f6592b69c14.
//
// Solidity: event JobCreatorAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseJobCreatorAgreed(log types.Log) (*ControllerJobCreatorAgreed, error) {
	event := new(ControllerJobCreatorAgreed)
	if err := _Controller.contract.UnpackLog(event, "JobCreatorAgreed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerMediationAcceptResultIterator is returned from FilterMediationAcceptResult and is used to iterate over the raw logs and unpacked data for MediationAcceptResult events raised by the Controller contract.
type ControllerMediationAcceptResultIterator struct {
	Event *ControllerMediationAcceptResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerMediationAcceptResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerMediationAcceptResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerMediationAcceptResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerMediationAcceptResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerMediationAcceptResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerMediationAcceptResult represents a MediationAcceptResult event raised by the Controller contract.
type ControllerMediationAcceptResult struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMediationAcceptResult is a free log retrieval operation binding the contract event 0x6869c4fbe3662f8188805783ad034002c0317a267b33e571b21803e0a82c222b.
//
// Solidity: event MediationAcceptResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterMediationAcceptResult(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerMediationAcceptResultIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "MediationAcceptResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerMediationAcceptResultIterator{contract: _Controller.contract, event: "MediationAcceptResult", logs: logs, sub: sub}, nil
}

// WatchMediationAcceptResult is a free log subscription operation binding the contract event 0x6869c4fbe3662f8188805783ad034002c0317a267b33e571b21803e0a82c222b.
//
// Solidity: event MediationAcceptResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchMediationAcceptResult(opts *bind.WatchOpts, sink chan<- *ControllerMediationAcceptResult, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "MediationAcceptResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerMediationAcceptResult)
				if err := _Controller.contract.UnpackLog(event, "MediationAcceptResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMediationAcceptResult is a log parse operation binding the contract event 0x6869c4fbe3662f8188805783ad034002c0317a267b33e571b21803e0a82c222b.
//
// Solidity: event MediationAcceptResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseMediationAcceptResult(log types.Log) (*ControllerMediationAcceptResult, error) {
	event := new(ControllerMediationAcceptResult)
	if err := _Controller.contract.UnpackLog(event, "MediationAcceptResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerMediationRejectResultIterator is returned from FilterMediationRejectResult and is used to iterate over the raw logs and unpacked data for MediationRejectResult events raised by the Controller contract.
type ControllerMediationRejectResultIterator struct {
	Event *ControllerMediationRejectResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerMediationRejectResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerMediationRejectResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerMediationRejectResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerMediationRejectResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerMediationRejectResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerMediationRejectResult represents a MediationRejectResult event raised by the Controller contract.
type ControllerMediationRejectResult struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMediationRejectResult is a free log retrieval operation binding the contract event 0x2be5a64d41d363eaaa7b5195947407dde33371bff56ead257396804137b11d35.
//
// Solidity: event MediationRejectResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterMediationRejectResult(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerMediationRejectResultIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "MediationRejectResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerMediationRejectResultIterator{contract: _Controller.contract, event: "MediationRejectResult", logs: logs, sub: sub}, nil
}

// WatchMediationRejectResult is a free log subscription operation binding the contract event 0x2be5a64d41d363eaaa7b5195947407dde33371bff56ead257396804137b11d35.
//
// Solidity: event MediationRejectResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchMediationRejectResult(opts *bind.WatchOpts, sink chan<- *ControllerMediationRejectResult, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "MediationRejectResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerMediationRejectResult)
				if err := _Controller.contract.UnpackLog(event, "MediationRejectResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMediationRejectResult is a log parse operation binding the contract event 0x2be5a64d41d363eaaa7b5195947407dde33371bff56ead257396804137b11d35.
//
// Solidity: event MediationRejectResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseMediationRejectResult(log types.Log) (*ControllerMediationRejectResult, error) {
	event := new(ControllerMediationRejectResult)
	if err := _Controller.contract.UnpackLog(event, "MediationRejectResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Controller contract.
type ControllerOwnershipTransferredIterator struct {
	Event *ControllerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerOwnershipTransferred represents a OwnershipTransferred event raised by the Controller contract.
type ControllerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Controller *ControllerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ControllerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ControllerOwnershipTransferredIterator{contract: _Controller.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Controller *ControllerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ControllerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerOwnershipTransferred)
				if err := _Controller.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Controller *ControllerFilterer) ParseOwnershipTransferred(log types.Log) (*ControllerOwnershipTransferred, error) {
	event := new(ControllerOwnershipTransferred)
	if err := _Controller.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerResourceProviderAgreedIterator is returned from FilterResourceProviderAgreed and is used to iterate over the raw logs and unpacked data for ResourceProviderAgreed events raised by the Controller contract.
type ControllerResourceProviderAgreedIterator struct {
	Event *ControllerResourceProviderAgreed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerResourceProviderAgreedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerResourceProviderAgreed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerResourceProviderAgreed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerResourceProviderAgreedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerResourceProviderAgreedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerResourceProviderAgreed represents a ResourceProviderAgreed event raised by the Controller contract.
type ControllerResourceProviderAgreed struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterResourceProviderAgreed is a free log retrieval operation binding the contract event 0x26a8f34da4d873e21cd45615776e6b843f82381ff094e72c5145f7a39466158f.
//
// Solidity: event ResourceProviderAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterResourceProviderAgreed(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerResourceProviderAgreedIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ResourceProviderAgreed", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerResourceProviderAgreedIterator{contract: _Controller.contract, event: "ResourceProviderAgreed", logs: logs, sub: sub}, nil
}

// WatchResourceProviderAgreed is a free log subscription operation binding the contract event 0x26a8f34da4d873e21cd45615776e6b843f82381ff094e72c5145f7a39466158f.
//
// Solidity: event ResourceProviderAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchResourceProviderAgreed(opts *bind.WatchOpts, sink chan<- *ControllerResourceProviderAgreed, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ResourceProviderAgreed", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerResourceProviderAgreed)
				if err := _Controller.contract.UnpackLog(event, "ResourceProviderAgreed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResourceProviderAgreed is a log parse operation binding the contract event 0x26a8f34da4d873e21cd45615776e6b843f82381ff094e72c5145f7a39466158f.
//
// Solidity: event ResourceProviderAgreed(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseResourceProviderAgreed(log types.Log) (*ControllerResourceProviderAgreed, error) {
	event := new(ControllerResourceProviderAgreed)
	if err := _Controller.contract.UnpackLog(event, "ResourceProviderAgreed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerResultAcceptedIterator is returned from FilterResultAccepted and is used to iterate over the raw logs and unpacked data for ResultAccepted events raised by the Controller contract.
type ControllerResultAcceptedIterator struct {
	Event *ControllerResultAccepted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerResultAcceptedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerResultAccepted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerResultAccepted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerResultAcceptedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerResultAcceptedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerResultAccepted represents a ResultAccepted event raised by the Controller contract.
type ControllerResultAccepted struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterResultAccepted is a free log retrieval operation binding the contract event 0x5bdb4aa0a0647d4311e04dd653def3a11ed762cab8cd7eb1465046687b0018a3.
//
// Solidity: event ResultAccepted(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterResultAccepted(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerResultAcceptedIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ResultAccepted", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerResultAcceptedIterator{contract: _Controller.contract, event: "ResultAccepted", logs: logs, sub: sub}, nil
}

// WatchResultAccepted is a free log subscription operation binding the contract event 0x5bdb4aa0a0647d4311e04dd653def3a11ed762cab8cd7eb1465046687b0018a3.
//
// Solidity: event ResultAccepted(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchResultAccepted(opts *bind.WatchOpts, sink chan<- *ControllerResultAccepted, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ResultAccepted", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerResultAccepted)
				if err := _Controller.contract.UnpackLog(event, "ResultAccepted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResultAccepted is a log parse operation binding the contract event 0x5bdb4aa0a0647d4311e04dd653def3a11ed762cab8cd7eb1465046687b0018a3.
//
// Solidity: event ResultAccepted(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseResultAccepted(log types.Log) (*ControllerResultAccepted, error) {
	event := new(ControllerResultAccepted)
	if err := _Controller.contract.UnpackLog(event, "ResultAccepted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerResultAddedIterator is returned from FilterResultAdded and is used to iterate over the raw logs and unpacked data for ResultAdded events raised by the Controller contract.
type ControllerResultAddedIterator struct {
	Event *ControllerResultAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerResultAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerResultAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerResultAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerResultAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerResultAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerResultAdded represents a ResultAdded event raised by the Controller contract.
type ControllerResultAdded struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterResultAdded is a free log retrieval operation binding the contract event 0x92304b2ca1800e2e7b33e9d20a5da5822623e9a982f53a496597185a1abaaf35.
//
// Solidity: event ResultAdded(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterResultAdded(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerResultAddedIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ResultAdded", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerResultAddedIterator{contract: _Controller.contract, event: "ResultAdded", logs: logs, sub: sub}, nil
}

// WatchResultAdded is a free log subscription operation binding the contract event 0x92304b2ca1800e2e7b33e9d20a5da5822623e9a982f53a496597185a1abaaf35.
//
// Solidity: event ResultAdded(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchResultAdded(opts *bind.WatchOpts, sink chan<- *ControllerResultAdded, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ResultAdded", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerResultAdded)
				if err := _Controller.contract.UnpackLog(event, "ResultAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResultAdded is a log parse operation binding the contract event 0x92304b2ca1800e2e7b33e9d20a5da5822623e9a982f53a496597185a1abaaf35.
//
// Solidity: event ResultAdded(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseResultAdded(log types.Log) (*ControllerResultAdded, error) {
	event := new(ControllerResultAdded)
	if err := _Controller.contract.UnpackLog(event, "ResultAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerResultCheckedIterator is returned from FilterResultChecked and is used to iterate over the raw logs and unpacked data for ResultChecked events raised by the Controller contract.
type ControllerResultCheckedIterator struct {
	Event *ControllerResultChecked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerResultCheckedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerResultChecked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerResultChecked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerResultCheckedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerResultCheckedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerResultChecked represents a ResultChecked event raised by the Controller contract.
type ControllerResultChecked struct {
	DealId   *big.Int
	Mediator common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterResultChecked is a free log retrieval operation binding the contract event 0x074f78619102b3535ae08a4db24ea45c911a67d55d987fea03a839676c7b57e8.
//
// Solidity: event ResultChecked(uint256 indexed dealId, address indexed mediator)
func (_Controller *ControllerFilterer) FilterResultChecked(opts *bind.FilterOpts, dealId []*big.Int, mediator []common.Address) (*ControllerResultCheckedIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}
	var mediatorRule []interface{}
	for _, mediatorItem := range mediator {
		mediatorRule = append(mediatorRule, mediatorItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "ResultChecked", dealIdRule, mediatorRule)
	if err != nil {
		return nil, err
	}
	return &ControllerResultCheckedIterator{contract: _Controller.contract, event: "ResultChecked", logs: logs, sub: sub}, nil
}

// WatchResultChecked is a free log subscription operation binding the contract event 0x074f78619102b3535ae08a4db24ea45c911a67d55d987fea03a839676c7b57e8.
//
// Solidity: event ResultChecked(uint256 indexed dealId, address indexed mediator)
func (_Controller *ControllerFilterer) WatchResultChecked(opts *bind.WatchOpts, sink chan<- *ControllerResultChecked, dealId []*big.Int, mediator []common.Address) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}
	var mediatorRule []interface{}
	for _, mediatorItem := range mediator {
		mediatorRule = append(mediatorRule, mediatorItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "ResultChecked", dealIdRule, mediatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerResultChecked)
				if err := _Controller.contract.UnpackLog(event, "ResultChecked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResultChecked is a log parse operation binding the contract event 0x074f78619102b3535ae08a4db24ea45c911a67d55d987fea03a839676c7b57e8.
//
// Solidity: event ResultChecked(uint256 indexed dealId, address indexed mediator)
func (_Controller *ControllerFilterer) ParseResultChecked(log types.Log) (*ControllerResultChecked, error) {
	event := new(ControllerResultChecked)
	if err := _Controller.contract.UnpackLog(event, "ResultChecked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerTimeoutJudgeResultIterator is returned from FilterTimeoutJudgeResult and is used to iterate over the raw logs and unpacked data for TimeoutJudgeResult events raised by the Controller contract.
type ControllerTimeoutJudgeResultIterator struct {
	Event *ControllerTimeoutJudgeResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerTimeoutJudgeResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerTimeoutJudgeResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerTimeoutJudgeResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerTimeoutJudgeResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerTimeoutJudgeResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerTimeoutJudgeResult represents a TimeoutJudgeResult event raised by the Controller contract.
type ControllerTimeoutJudgeResult struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTimeoutJudgeResult is a free log retrieval operation binding the contract event 0x6d119d722b70ecb67111e4b5501842b0d67693c9f093672d604d39e3ae955504.
//
// Solidity: event TimeoutJudgeResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterTimeoutJudgeResult(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerTimeoutJudgeResultIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "TimeoutJudgeResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerTimeoutJudgeResultIterator{contract: _Controller.contract, event: "TimeoutJudgeResult", logs: logs, sub: sub}, nil
}

// WatchTimeoutJudgeResult is a free log subscription operation binding the contract event 0x6d119d722b70ecb67111e4b5501842b0d67693c9f093672d604d39e3ae955504.
//
// Solidity: event TimeoutJudgeResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchTimeoutJudgeResult(opts *bind.WatchOpts, sink chan<- *ControllerTimeoutJudgeResult, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "TimeoutJudgeResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerTimeoutJudgeResult)
				if err := _Controller.contract.UnpackLog(event, "TimeoutJudgeResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimeoutJudgeResult is a log parse operation binding the contract event 0x6d119d722b70ecb67111e4b5501842b0d67693c9f093672d604d39e3ae955504.
//
// Solidity: event TimeoutJudgeResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseTimeoutJudgeResult(log types.Log) (*ControllerTimeoutJudgeResult, error) {
	event := new(ControllerTimeoutJudgeResult)
	if err := _Controller.contract.UnpackLog(event, "TimeoutJudgeResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerTimeoutMediateResultIterator is returned from FilterTimeoutMediateResult and is used to iterate over the raw logs and unpacked data for TimeoutMediateResult events raised by the Controller contract.
type ControllerTimeoutMediateResultIterator struct {
	Event *ControllerTimeoutMediateResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerTimeoutMediateResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerTimeoutMediateResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerTimeoutMediateResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerTimeoutMediateResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerTimeoutMediateResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerTimeoutMediateResult represents a TimeoutMediateResult event raised by the Controller contract.
type ControllerTimeoutMediateResult struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTimeoutMediateResult is a free log retrieval operation binding the contract event 0x89e0dd5728e1ea979c4292369726e7d04659e09cc314290d30caa1674be96f56.
//
// Solidity: event TimeoutMediateResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterTimeoutMediateResult(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerTimeoutMediateResultIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "TimeoutMediateResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerTimeoutMediateResultIterator{contract: _Controller.contract, event: "TimeoutMediateResult", logs: logs, sub: sub}, nil
}

// WatchTimeoutMediateResult is a free log subscription operation binding the contract event 0x89e0dd5728e1ea979c4292369726e7d04659e09cc314290d30caa1674be96f56.
//
// Solidity: event TimeoutMediateResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchTimeoutMediateResult(opts *bind.WatchOpts, sink chan<- *ControllerTimeoutMediateResult, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "TimeoutMediateResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerTimeoutMediateResult)
				if err := _Controller.contract.UnpackLog(event, "TimeoutMediateResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimeoutMediateResult is a log parse operation binding the contract event 0x89e0dd5728e1ea979c4292369726e7d04659e09cc314290d30caa1674be96f56.
//
// Solidity: event TimeoutMediateResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseTimeoutMediateResult(log types.Log) (*ControllerTimeoutMediateResult, error) {
	event := new(ControllerTimeoutMediateResult)
	if err := _Controller.contract.UnpackLog(event, "TimeoutMediateResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ControllerTimeoutSubmitResultIterator is returned from FilterTimeoutSubmitResult and is used to iterate over the raw logs and unpacked data for TimeoutSubmitResult events raised by the Controller contract.
type ControllerTimeoutSubmitResultIterator struct {
	Event *ControllerTimeoutSubmitResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ControllerTimeoutSubmitResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ControllerTimeoutSubmitResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ControllerTimeoutSubmitResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ControllerTimeoutSubmitResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ControllerTimeoutSubmitResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ControllerTimeoutSubmitResult represents a TimeoutSubmitResult event raised by the Controller contract.
type ControllerTimeoutSubmitResult struct {
	DealId *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTimeoutSubmitResult is a free log retrieval operation binding the contract event 0xbc228c937af4086388ee0005a68438286f19bbaa17d16ca9fa1b4361a918ee42.
//
// Solidity: event TimeoutSubmitResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) FilterTimeoutSubmitResult(opts *bind.FilterOpts, dealId []*big.Int) (*ControllerTimeoutSubmitResultIterator, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.FilterLogs(opts, "TimeoutSubmitResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return &ControllerTimeoutSubmitResultIterator{contract: _Controller.contract, event: "TimeoutSubmitResult", logs: logs, sub: sub}, nil
}

// WatchTimeoutSubmitResult is a free log subscription operation binding the contract event 0xbc228c937af4086388ee0005a68438286f19bbaa17d16ca9fa1b4361a918ee42.
//
// Solidity: event TimeoutSubmitResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) WatchTimeoutSubmitResult(opts *bind.WatchOpts, sink chan<- *ControllerTimeoutSubmitResult, dealId []*big.Int) (event.Subscription, error) {

	var dealIdRule []interface{}
	for _, dealIdItem := range dealId {
		dealIdRule = append(dealIdRule, dealIdItem)
	}

	logs, sub, err := _Controller.contract.WatchLogs(opts, "TimeoutSubmitResult", dealIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ControllerTimeoutSubmitResult)
				if err := _Controller.contract.UnpackLog(event, "TimeoutSubmitResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimeoutSubmitResult is a log parse operation binding the contract event 0xbc228c937af4086388ee0005a68438286f19bbaa17d16ca9fa1b4361a918ee42.
//
// Solidity: event TimeoutSubmitResult(uint256 indexed dealId)
func (_Controller *ControllerFilterer) ParseTimeoutSubmitResult(log types.Log) (*ControllerTimeoutSubmitResult, error) {
	event := new(ControllerTimeoutSubmitResult)
	if err := _Controller.contract.UnpackLog(event, "TimeoutSubmitResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
